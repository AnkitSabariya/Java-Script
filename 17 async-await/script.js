// ‚úÖ‚úÖ‚úÖ ----------------------------
// Example 1Ô∏è‚É£ : Manual Promise + Async/Await
// ----------------------------

// ‚ö° 1Ô∏è‚É£ Ye function manually ek Promise banata hai:
function wait2seconds() {
  console.log("‚è≥ Waiting 2 seconds...");

  // ‚ö° 2Ô∏è‚É£ Return karo ek new Promise
  // Yahan hum setTimeout se simulate kar rahe hain ki 2 second baad kuch hoga
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("‚úÖ Done! Thanks for waiting."); // 2 sec baad resolve()
    }, 2000);
  });
}

// ‚ö° 3Ô∏è‚É£ Ye async function us wait2seconds() ko call karta hai
async function showWait() {
  console.log("üîµ Start");

  // ‚ö° 4Ô∏è‚É£ await = Promise ke settle hone tak wait karo
  let result = await wait2seconds();

  // ‚ö° 5Ô∏è‚É£ Jab resolve() hoga tab ye chalega:
  console.log(result);

  console.log("üü¢ End");
}

// ‚ö° 6Ô∏è‚É£ Function ko call karo
showWait();


// ‚úÖ‚úÖ‚úÖ ----------------------------
// Example 2Ô∏è‚É£ : Fetch API with Async/Await
// ----------------------------

// ‚ö° API call + JSON parse karna + error handle karna
async function getUsers() {
  try {
    console.log("üåê Fetching users...");

    // ‚úÖ fetch() returns a Promise ‚Äî so await karo
    const res = await fetch("https://jsonplaceholder.typicode.com/users");

    // ‚úÖ res.json() bhi Promise hai ‚Äî so usko bhi await karo
    const data = await res.json();

    console.log("‚úÖ Users:", data);

  } catch (err) {
    // ‚ö° Agar koi network ya parsing error ho to catch mein aayega
    console.error("‚ùå Error:", err);
  }
}

getUsers();


// ‚úÖ‚úÖ‚úÖ ----------------------------
// Example 3Ô∏è‚É£ : SAME Fetch using only Promises (.then())
// ----------------------------

function getUsersPromiseWay() {
  console.log("üåê Fetching users (Promise way)...");

  // ‚ö° Yahan async/await nahi, only .then() & .catch()
  fetch("https://jsonplaceholder.typicode.com/users")
    .then((response) => response.json()) // ‚úÖ First then: parse JSON
    .then((data) => {
      console.log("‚úÖ Users (Promise way):", data);
    })
    .catch((err) => {
      console.error("‚ùå Error (Promise way):", err);
    });
}

getUsersPromiseWay();


// ‚úÖ‚úÖ‚úÖ ----------------------------
// Example 4Ô∏è‚É£ : `Promise.all` + Async/Await ‚Äî Multiple requests parallel
// ----------------------------

async function getMultipleData() {
  try {
    console.log("üåê Fetching users & posts together...");

    // ‚ö° Promise.all = multiple Promises ek sath execute karo
    const [users, posts] = await Promise.all([
      fetch("https://jsonplaceholder.typicode.com/users").then(res => res.json()),
      fetch("https://jsonplaceholder.typicode.com/posts").then(res => res.json())
    ]);

    console.log("‚úÖ Users:", users);
    console.log("‚úÖ Posts:", posts);

  } catch (err) {
    console.error("‚ùå Multi-fetch error:", err);
  }
}

getMultipleData();


// ‚úÖ‚úÖ‚úÖ ----------------------------
// Example 5Ô∏è‚É£ : Custom Wait + Fetch Mix ‚Äî 360¬∞
// ----------------------------

// ‚ö° 1Ô∏è‚É£ Custom wait function jo Promise return karta hai
function wait(ms) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(`‚úÖ Waited ${ms} ms!`);
    }, ms);
  });
}

// ‚ö° 2Ô∏è‚É£ Wait karo, fir API call karo
async function getDataWithDelay() {
  console.log("‚åõ Waiting 3 sec before API call...");

  const msg = await wait(3000); // ‚ö° custom wait
  console.log(msg);             // ‚úÖ show wait msg

  console.log("üåê Now fetching todo...");

  const res = await fetch("https://jsonplaceholder.typicode.com/todos/1");
  const todo = await res.json();

  console.log("‚úÖ Todo:", todo);
}

getDataWithDelay();
